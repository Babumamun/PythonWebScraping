If you find the openpyxl project intriguing and want to contribute a new awesome
feature, fix a nasty bug or improve the documentation this section will guide you
in setting up your development environment.
We will look into the coding standards and version control system workflows used,
as well as cloning the openpyxl code to your local machine, setting up a virtual
Python environment, running tests and building the documentation.
You can then grab any new changes using:
Activate the environment using:
Install the dev and prod dependencies and the package itself using:
To run all the tests you need to either execute:
The goal is 100 % coverage for unit tests - data types and utility functions.
Coverage information can be obtained using:
When working on code to generate XML it is possible to validate that the
generated XML conforms to the published specification. Note, this won’t
necessarily guarantee that everything is fine but is preferable to reverse
engineering!
This allows you to quickly inspect or compare whole Excel files.
Unfortunately, validation errors contain many false positives. The tool also
contain links to the specification and implementers’ notes.
Where possible we try to support files generated by other libraries or
programs, but can’t guarantee it, because often these do not strictly adhere
to the above format.
Python 3.6 and upwards are supported
We orient ourselves at PEP-8 for the coding style, except when implementing
attributes for roundtripping. Despite that you are encouraged to use Python
data conventions (boolean, None, etc.). Note exceptions from this convestion
in docstrings.
Contributions in the form of pull requests are always welcome. Don’t forget
to add yourself to the list of authors!
We use a “major.minor.patch” numbering system, ie. 3.0.5. Development
branches are named after “major.minor” releases. In general, API change will
only happen major releases but there will be exceptions. Always communicate
API changes to the mailing list before making them. If you are changing an
API try and an implement a fallback (with deprecation warning) for the old
behaviour.
The “default branch” is used for releases and always has changes from a
development branch merged in. It should never be the target for a pull
request.
Pull requests should be submitted to the current, unreleased development
branch. Eg. if the current release is 3.0.5, pull requests should be made
to the 3.0 branch. Exceptions are bug fixes to released versions which
should be made to the relevant release branch and merged upstream into
development.
Remember to update the documentation when adding or changing features. Check
that documentation is syntactically correct.:
Benchmarking and profiling are ongoing tasks. Contributions to these are very
welcome as we know there is a lot to do.
You can then grab any new changes using:
Activate the environment using:
Install the dev and prod dependencies and the package itself using:
To run all the tests you need to either execute:
The goal is 100 % coverage for unit tests - data types and utility functions.
Coverage information can be obtained using:
When working on code to generate XML it is possible to validate that the
generated XML conforms to the published specification. Note, this won’t
necessarily guarantee that everything is fine but is preferable to reverse
engineering!
This allows you to quickly inspect or compare whole Excel files.
Unfortunately, validation errors contain many false positives. The tool also
contain links to the specification and implementers’ notes.
The goal is 100 % coverage for unit tests - data types and utility functions.
Coverage information can be obtained using:
When working on code to generate XML it is possible to validate that the
generated XML conforms to the published specification. Note, this won’t
necessarily guarantee that everything is fine but is preferable to reverse
engineering!
This allows you to quickly inspect or compare whole Excel files.
Unfortunately, validation errors contain many false positives. The tool also
contain links to the specification and implementers’ notes.
Where possible we try to support files generated by other libraries or
programs, but can’t guarantee it, because often these do not strictly adhere
to the above format.
Python 3.6 and upwards are supported
We orient ourselves at PEP-8 for the coding style, except when implementing
attributes for roundtripping. Despite that you are encouraged to use Python
data conventions (boolean, None, etc.). Note exceptions from this convestion
in docstrings.
Contributions in the form of pull requests are always welcome. Don’t forget
to add yourself to the list of authors!
We use a “major.minor.patch” numbering system, ie. 3.0.5. Development
branches are named after “major.minor” releases. In general, API change will
only happen major releases but there will be exceptions. Always communicate
API changes to the mailing list before making them. If you are changing an
API try and an implement a fallback (with deprecation warning) for the old
behaviour.
The “default branch” is used for releases and always has changes from a
development branch merged in. It should never be the target for a pull
request.
Pull requests should be submitted to the current, unreleased development
branch. Eg. if the current release is 3.0.5, pull requests should be made
to the 3.0 branch. Exceptions are bug fixes to released versions which
should be made to the relevant release branch and merged upstream into
development.
Remember to update the documentation when adding or changing features. Check
that documentation is syntactically correct.:
Remember to update the documentation when adding or changing features. Check
that documentation is syntactically correct.:
Benchmarking and profiling are ongoing tasks. Contributions to these are very
welcome as we know there is a lot to do.
If you find the openpyxl project intriguing and want to contribute a new awesome
feature, fix a nasty bug or improve the documentation this section will guide you
in setting up your development environment.
We will look into the coding standards and version control system workflows used,
as well as cloning the openpyxl code to your local machine, setting up a virtual
Python environment, running tests and building the documentation.
You can then grab any new changes using:
Activate the environment using:
Install the dev and prod dependencies and the package itself using:
To run all the tests you need to either execute:
The goal is 100 % coverage for unit tests - data types and utility functions.
Coverage information can be obtained using:
When working on code to generate XML it is possible to validate that the
generated XML conforms to the published specification. Note, this won’t
necessarily guarantee that everything is fine but is preferable to reverse
engineering!
This allows you to quickly inspect or compare whole Excel files.
Unfortunately, validation errors contain many false positives. The tool also
contain links to the specification and implementers’ notes.
Where possible we try to support files generated by other libraries or
programs, but can’t guarantee it, because often these do not strictly adhere
to the above format.
Python 3.6 and upwards are supported
We orient ourselves at PEP-8 for the coding style, except when implementing
attributes for roundtripping. Despite that you are encouraged to use Python
data conventions (boolean, None, etc.). Note exceptions from this convestion
in docstrings.
Contributions in the form of pull requests are always welcome. Don’t forget
to add yourself to the list of authors!
We use a “major.minor.patch” numbering system, ie. 3.0.5. Development
branches are named after “major.minor” releases. In general, API change will
only happen major releases but there will be exceptions. Always communicate
API changes to the mailing list before making them. If you are changing an
API try and an implement a fallback (with deprecation warning) for the old
behaviour.
The “default branch” is used for releases and always has changes from a
development branch merged in. It should never be the target for a pull
request.
Pull requests should be submitted to the current, unreleased development
branch. Eg. if the current release is 3.0.5, pull requests should be made
to the 3.0 branch. Exceptions are bug fixes to released versions which
should be made to the relevant release branch and merged upstream into
development.
Remember to update the documentation when adding or changing features. Check
that documentation is syntactically correct.:
Benchmarking and profiling are ongoing tasks. Contributions to these are very
welcome as we know there is a lot to do.
You can then grab any new changes using:
Activate the environment using:
Install the dev and prod dependencies and the package itself using:
To run all the tests you need to either execute:
The goal is 100 % coverage for unit tests - data types and utility functions.
Coverage information can be obtained using:
When working on code to generate XML it is possible to validate that the
generated XML conforms to the published specification. Note, this won’t
necessarily guarantee that everything is fine but is preferable to reverse
engineering!
This allows you to quickly inspect or compare whole Excel files.
Unfortunately, validation errors contain many false positives. The tool also
contain links to the specification and implementers’ notes.
The goal is 100 % coverage for unit tests - data types and utility functions.
Coverage information can be obtained using:
When working on code to generate XML it is possible to validate that the
generated XML conforms to the published specification. Note, this won’t
necessarily guarantee that everything is fine but is preferable to reverse
engineering!
This allows you to quickly inspect or compare whole Excel files.
Unfortunately, validation errors contain many false positives. The tool also
contain links to the specification and implementers’ notes.
Where possible we try to support files generated by other libraries or
programs, but can’t guarantee it, because often these do not strictly adhere
to the above format.
Python 3.6 and upwards are supported
We orient ourselves at PEP-8 for the coding style, except when implementing
attributes for roundtripping. Despite that you are encouraged to use Python
data conventions (boolean, None, etc.). Note exceptions from this convestion
in docstrings.
Contributions in the form of pull requests are always welcome. Don’t forget
to add yourself to the list of authors!
We use a “major.minor.patch” numbering system, ie. 3.0.5. Development
branches are named after “major.minor” releases. In general, API change will
only happen major releases but there will be exceptions. Always communicate
API changes to the mailing list before making them. If you are changing an
API try and an implement a fallback (with deprecation warning) for the old
behaviour.
The “default branch” is used for releases and always has changes from a
development branch merged in. It should never be the target for a pull
request.
Pull requests should be submitted to the current, unreleased development
branch. Eg. if the current release is 3.0.5, pull requests should be made
to the 3.0 branch. Exceptions are bug fixes to released versions which
should be made to the relevant release branch and merged upstream into
development.
Remember to update the documentation when adding or changing features. Check
that documentation is syntactically correct.:
Remember to update the documentation when adding or changing features. Check
that documentation is syntactically correct.:
Benchmarking and profiling are ongoing tasks. Contributions to these are very
welcome as we know there is a lot to do.
